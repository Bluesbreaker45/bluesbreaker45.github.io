<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mission Impossible</title>
    <link href="/2023/09/08/Senior-Planning/"/>
    <url>/2023/09/08/Senior-Planning/</url>
    
    <content type="html"><![CDATA[<p>入学仿佛就在昨天，没想到这么快就成为大四老狗了。许多想在大学里完成的事情有不少都没有完成。那就做一个TODO List督促自己吧！</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023: A Haskell Odyssey</title>
    <link href="/2023/09/07/Haskell-Learning/"/>
    <url>/2023/09/07/Haskell-Learning/</url>
    
    <content type="html"><![CDATA[<p><em>“Don’t try to understand it. Feel it.”</em><em>– Tenet</em></p><span id="more"></span><h2 id="Start-Learn-You-a-Haskell-for-Great-Good"><a href="#Start-Learn-You-a-Haskell-for-Great-Good" class="headerlink" title="Start: Learn You a Haskell for Great Good!"></a>Start: Learn You a Haskell for Great Good!</h2><p>Haskell的语法是优雅的。</p><p>诸如“允许符号字符串作为name”、“可以用中缀形式定义并应用函数”、“内置的<code>$</code>, <code>.</code>运算符”等设计，为程序员写出更易读的代码风格创造可能。这使得Haskell克服了同为函数式的Lisp括号满天飞的问题（<a href="https://www.reddit.com/r/ProgrammerHumor/comments/7sk1rx/a_spy_manages_to_steal_the_last_50mb_of_the_lisp/">这里</a>有一个笑话。当然我也知道这是Lisp的Parser实现简单的原因），也克服了C系语法对较为死板的apply方式。</p><p>因为有学过Scheme，平时在写Python和Java的时候也经常使用一些函数式的写法（Stream也是函数式（振声）），所以用函数式思维写程序并没有什么障碍。但是Haskell的库不太熟，所以还是经常做出手搓复杂轮子的事情。还是有待精进啊！</p><p>Haskell让我耳目一新的，</p><p>一，是与我比较熟悉的Java截然不同的类型系统，这也是我接下来学习的对象之一；</p><p>二，也是学习Haskell时最“臭名昭著”的难点，是以<code>Monad</code>为代表的类，也就是带computing environment&#x2F;context的类。似乎这也被认为是函数式编程的进阶内容（这不是我说的，参考<a href="https://pl.cs.pku.edu.cn/info/1017/1839.htm">该课程安排</a>）。这与我印象中其他语言的进阶内容不相符：难道不应该是一些和语法相关的写法吗？（虽然对库的使用也是很重要的）</p><p>顺着上面所说，也有人称Haskell为<a href="https://pl.cs.pku.edu.cn/info/1017/1839.htm">“Value-Oriented Programming”</a>，也许是因为Haskell强大的表达能力并非源于某些语法，而是由数据结构来进行复杂表达？感觉有点Meta Programming的味道了。然后我就突然想起来之前看过的一个<a href="https://www.zhihu.com/question/27355585/answer/36418834">知乎回答</a>提到<code>Monad</code>和Aspect-Oriented Programming的关系。</p><p>自由的表达能力加上出神入化的数据结构以实现一些神奇的功能，或许这就是Haskell哲学吧！</p><p>上面瞎扯了这么多不通顺的东西，看起来挺没意思的。接下来就顺着<em>Learn you a Haskell</em>的章节顺序来做一点小小的我觉得有意思的地方吧！</p><h3 id="Introduction-Installation"><a href="#Introduction-Installation" class="headerlink" title="Introduction (Installation)"></a>Introduction (Installation)</h3><p>一些比较入门的东西，我觉得比较抽象的一点在安装<code>GHCup</code>自带的包管理器<code>Cabal</code>上。不知道是不是得益于国内的网络质量，<code>wsl2</code>用官网的安装脚本安装的时候会卡在<code>Cabal</code>的一步复制某个default configuration上。我目前的workaround是：</p><ol><li>在这一步<code>Ctrl-c</code>掉；</li><li>然后手动运行<code>cabal user-config update</code>去产生一个默认config；</li><li>选择你喜欢的<code>hackage</code>源，加入<code>~/.cabal/config</code>里，替换掉原来的官方仓库（你最喜欢的源一定是<a href="https://mirror.nju.edu.cn/mirrorz-help/hackage/?mirror=NJU">NJU Mirror</a>，对吧？）。</li></ol><p>（我在写这一节，查看NJU Mirror对应手册的时候才发现手册说得已经很清楚了。向当时断断续续安装几个晚上而不得的我致以崇高敬意）。这样的话似乎也能正常使用，我后来用<code>Cabal</code>在本地安装了<a href="https://wiki.haskell.org/Hoogle"><code>hoogle</code>，一个很酷的API查询插件</a>。</p><p>另外就是在安装的时候建议安装<code>hls</code>(Haskell Language Server)，这样的话用<code>VSCode</code>时才能使用自动补全和语法检查建议等功能。配置VScode的<code>ghcup</code>路径的时候注意和别的工具不太一样，不是到bin文件夹，而是直接配置到<code>ghcup</code>，比如<code>~/.ghcup/bin/ghcup</code>。</p><h3 id="Starting-Out"><a href="#Starting-Out" class="headerlink" title="Starting-Out"></a>Starting-Out</h3><p>我想你注意到了<code>ghci</code>，并且很容易把它理解成类似Python Intepreter一样的东西。但是此二者有着一定差别：在学习，你可以完全基于Python Intepreter进行所有实验与测试，但<code>ghci</code>做不到这一点，部分语法无法可读地在<code>ghci</code>内表达，此外在语义上也有部分区别。学到<code>IO</code>和<code>Monad</code>相关章节以后你可能会有更深刻的体会。</p><p>因此，我建议你仿照作者在<code>Introduction</code>一节最后描述，在<code>Baby&#39;s first functions</code>一节开头再次演示的工作流，即在某个Haskell源文件里编写代码，然后在<code>ghci</code>内用<code>:l</code>命令将代码load进ghci内的方式，进行测试。</p>]]></content>
    
    
    <categories>
      
      <category>Programming Language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Haskell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Top Playlist of 2022</title>
    <link href="/2022/12/17/Top-playlist-of-2022/"/>
    <url>/2022/12/17/Top-playlist-of-2022/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">song</th><th align="center">author</th></tr></thead><tbody><tr><td align="center"><a href="https://open.spotify.com/track/5RF3XKTeCfwX8C0TeHuF5s">Cadence and Cascade</a></td><td align="center">King Crimson</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/02BsTeJE4q5gWOTt58ur5U">I Can’t Tell You Why - 2013 Remaster</a></td><td align="center">Eagles</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5LyRtsQLhcXmy50VXhQXXS">Holy Wars…The Punishment Due - Remastered 2004</a></td><td align="center">Megadeth</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0L7zm6afBEtrNKo6C6Gj08">Painkiller</a></td><td align="center">Judas Priest</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0Q2dRzhPWFOex89dOjbq5Y">Watermelon In Easter Hay</a></td><td align="center">Frank Zappa</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0cqcRqZgkNHanWQ8slYA0v">Mahler: Symphony No. 5 in C-Sharp Minor: IV. Adagietto. Sehr langsam</a></td><td align="center">Gustav Mahler</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/07lMhgpMlwHXQgEs2pXmhg">Drop It Like It’s Hot!</a></td><td align="center">Haarper</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6mFkJmJqdDVQ1REhVfGgd1">Wish You Were Here</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4jOlYUMMsCacMm3xcrYRLl">The Four Seasons - Spring in E Major, RV. 269: I. Allegro</a></td><td align="center">Antonio Vivaldi</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/74WjYdm3Lvbwnds4thYPUU">Turandot, SC 91 &#x2F; Act III: “Nessun dorma!”</a></td><td align="center">Giacomo Puccini</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1Ab3hhOw1TJWDgO10vlxNZ">The Trooper - 2015 Remaster</a></td><td align="center">Iron Maiden</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1ixhDcbuuFUepgnsjl3ybU">夏日漱石(Summer Cozy Rock)</a></td><td align="center">Orange Ocean</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4gVTozEmzwAUXpwj3jEetX">Highway Star</a></td><td align="center">Deep Purple</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5QLHGv0DfpeXLNFo7SFEy1">1979 - Remastered 2012</a></td><td align="center">The Smashing Pumpkins</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/7pKfPomDEeI4TPT6EOYjn9">Imagine - Remastered 2010</a></td><td align="center">John Lennon</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/46tPGzCXCI2oKsemztDA9u">Parce Mihi Domine</a></td><td align="center">Jan Garbarek</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4E5xVW505akJX0wcKj8Mpd">Tornado Of Souls - Remastered 2004</a></td><td align="center">Megadeth</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6pnwfWyaWjQiHCKTiZLItr">Shine On You Crazy Diamond (Pts. 1-5)</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4twwVp8NVb2qC3M3HxXOWZ">ZODD</a></td><td align="center">Haarper</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6ADSaE87h8Y3lccZlBJdXH">With Or Without You - Remastered</a></td><td align="center">U2</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/18QVbIw5S0MJHGWF2qLX75">Kinderszenen, Op. 15: No. 7 in F Major, Träumerei</a></td><td align="center">Robert Schumann</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5HNCy40Ni5BZJFw1TKzRsC">Comfortably Numb</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0jOnZhF75V68VsBObWx2XO">Saëns - The Carnival of the Animals, R. 125: XIII. The Swan (Arr. for Cello and Piano)</a></td><td align="center">Camille Saint</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5aME3xBO6g6nfBXThdtJwD">Firebird Suite - 1919 Version</a></td><td align="center">Igor Stravinsky</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1rxD34LAtkafrMUHqHIV76">Bring It on Home - Remaster</a></td><td align="center">Led Zeppelin</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3eLlW0GegkXy3o92t51xaJ">Schubert: Ave Maria, Op. 52 No. 6, D. 839</a></td><td align="center">Franz Schubert</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5xcYuTciYwyCDPkOgYBAYz">Rhapsody on a Theme of Paganini, Op. 43: Variation No. 18 Andante cantabile</a></td><td align="center">Sergei Rachmaninoff</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0YNY0I3Hkspqe2NlhuWAQu">Symphony in B Minor (arr. T. Finno for orchestra): II. Un poco lento, cantabile</a></td><td align="center">Claude Debussy</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1Qd3CUBmJMBOmapxPYY6pZ">People Get Ready</a></td><td align="center">Jeff Beck</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2fEbuFSksIThthle3Kj6uj">Symphony No. 8 in B Minor, D. 759 “Unfinished”: 1. Allegro moderato</a></td><td align="center">Franz Schubert</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/74O2ijHJxPd6FJMgL6A4aq">Covered in Rain - Live at the Oak Mountain Amphitheater, Birmingham, AL - September 2002</a></td><td align="center">John Mayer</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1FvMURFQ8Ca7A5sdRVuMir">Musetta’s Waltz</a></td><td align="center">Giacomo Puccini</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4QbpagjMCqSECj6IimTL2n">I Talk To The Wind</a></td><td align="center">King Crimson</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2l48bK5FOYIQHgoYSPl7Qw">Clarinet Concerto in A Major, K. 622: II. Adagio</a></td><td align="center">Wolfgang Amadeus Mozart</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/7cMFjxhbXBpOlais7KMF3j">Voyager</a></td><td align="center">Daft Punk</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0uppYCG86ajpV2hSR3dJJ0">Give It Away</a></td><td align="center">Red Hot Chili Peppers</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/71E83jKHQ7MQ7dOsj9WBPT">Crush</a></td><td align="center">Polyphia</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3PHt7AdVhjIMS5Yw5RIZKU">Wtf U Mean</a></td><td align="center">Haarper</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6vzkD6LA8mtbFscSWqP9MO">One - Remastered 2018</a></td><td align="center">U2</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1cpANF6zMBoFoxkoIjZHjv">Skating In Central Park</a></td><td align="center">Bill Evans</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2DmlTLFphBLAIACKPsLAQH">Pavane pour une infante défunte, M. 19 (Version for Orchestra)</a></td><td align="center">Maurice Ravel</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2UboK4rDkzSDhoBkox2vxR">Bungee Gum</a></td><td align="center">Haarper</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5MZALWjwQRX0RsZt31HlNP">Summer ‘68</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/7o56T3Ib6ZjVT6qFTCQFqP">Unity Village</a></td><td align="center">Pat Metheny</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1KpZV5L3I2PWFi1zIXFLkI">Mendelssohn: Violin Concerto in E Minor, Op. 64, MWV O14: I. Allegro molto appassionato</a></td><td align="center">Felix Mendelssohn</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4KqnNrqtlD8x4jHbYFsewL">In the Steppes of Central Asia</a></td><td align="center">Alexander Borodin</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1SkOyiUembPDeyEvFy1p0c">5 Stücke im Volkston, Op. 102: II. Langsam</a></td><td align="center">Robert Schumann</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/42N0DaPZhsFXxZMErfJmOv">Das Rheingold: Prelude</a></td><td align="center">Richard Wagner</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0XkcuWNLacWDwEDmvq4CCy">Serenade in B-Flat Major, K. 361 “Gran Partita”: III. Adagio</a></td><td align="center">Wolfgang Amadeus Mozart</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0fpqOyC5DLDe5gAYKBB6X7">La Fille aux Cheveux de Lin, L. 33</a></td><td align="center">Claude Debussy</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4PPwkLq2ld1k09Bl5NkyZB">Uncle Remus</a></td><td align="center">Frank Zappa</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1wlKw9NAWVWpx7OIAyg9EA">Fell On Black Days</a></td><td align="center">Soundgarden</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3xjTuTBaihydhSC7ByNoSb">Stuck In A Moment You Can’t Get Out Of</a></td><td align="center">U2</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2dPPmr7wXiTnQ4ujXLyOPq">Vltava (Vltava, The River)</a></td><td align="center">Bedřich Smetana</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/7CrRiJJd6UNRWyYdQTBI1U">The Alchemist</a></td><td align="center">Haarper</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3Dv1eDb0MEgF93GpLXlucZ">Say So</a></td><td align="center">Doja Cat</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5XaOvJcyNBNXRohL3eB9dL">This Is It</a></td><td align="center">Michael Jackson</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4gMgiXfqyzZLMhsksGmbQV">Another Brick in the Wall, Pt. 2</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3usoQ2H8FMM2rPcSMcRHYQ">iCARUS</a></td><td align="center">Haarper</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3BF3uROPt95X3X7ZixXFRC">Waltz For Debby</a></td><td align="center">Cannonball Adderley</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0Av4RcQUUitKvfC16IPodc">Double Concerto in A Minor, Op. 102 for Violin, Cello and Orchestra: II. Andante</a></td><td align="center">Johannes Brahms</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3TO7bbrUKrOSPGRTB5MeCz">Time</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/7D4lgMbSs10AQ0zX3ZldJc">ABC (feat. Sophia Black)</a></td><td align="center">Polyphia</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6Raz653SzfvRokSgYg9yxY">Send In The Clowns</a></td><td align="center">Ted Greene</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2SgbR6ttzoNlCRGQOKjrop">Cowboys from Hell</a></td><td align="center">Pantera</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3xGJuHvSxFJxxYlHj5BIoT">Young Lust</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1H4idkmruFoJBg1DvUv2tY">Band On The Run - 2010 Remaster</a></td><td align="center">Wings</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6GsP3uMCd0Dn5T37C93waZ">Sick Love</a></td><td align="center">Red Hot Chili Peppers</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2cJnBxkoWrf3Yv6pw07qau">Cavalleria rusticana: Intermezzo sinfonico</a></td><td align="center">Pietro Mascagni</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6GtX0jaNL8IjVQfrDBx81z">Bullet With Butterfly Wings - Remastered 2012</a></td><td align="center">The Smashing Pumpkins</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2iiJOgkKOCyb7ZPeqUNpud">Elden Ring</a></td><td align="center">Tsukasa Saitoh</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1Oo7XEqkrwifJn17aA0ocF">Sechs Klavierstücke, Op. 118: II. Intermezzo in A Major</a></td><td align="center">Johannes Brahms</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5mktG3zst5SVxAiVHY4j6C">不能說的秘密</a></td><td align="center">Jay Chou</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5zIJsFst05gsrUdr9ghEpG">Gottes Zeit ist die allerbeste Zeit, Sonatina az “Actus tragicus”-ból, BWV 106</a></td><td align="center">Johann Sebastian Bach</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1Po3hdH1Tze1Ze1edD6i0u">Mahler: Symphony No. 5 in C-Sharp Minor: I. Trauermarsch. In gemessenen Schritt. Streng. Wie ein Kondukt</a></td><td align="center">Gustav Mahler</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4fKhRRYn7F5shZItjJkPJU">Watching The Wheels - Remastered 2010</a></td><td align="center">John Lennon</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0pjCkLjbgSLn5c0Ilwuv8z">The Longest Wave</a></td><td align="center">Red Hot Chili Peppers</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6zGFOp6rJZbYSp9DQO5AHY">Wot’s…Uh the Deal</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5Vj4eHzcf4SJNtOx2SxWxw">Soiree</a></td><td align="center">Bill Evans</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0FQVIKpTQUHqRmZmxPchEw">Playing God</a></td><td align="center">Polyphia</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6wpGqhRvJGNNXwWlPmkMyO">I Still Haven’t Found What I’m Looking For</a></td><td align="center">U2</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1B0cZZLVgAxDYzMNnsZDuF">Book Of Saturday</a></td><td align="center">King Crimson</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4ZVWvCUwsOnIGmJMj71RkG">#9 Dream - Remastered 2010</a></td><td align="center">John Lennon</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5NGtFXVpXSvwunEIGeviY3">Gymnopédie No. 1</a></td><td align="center">Erik Satie</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4Oun2ylbjFKMPTiaSbbCih">WAP (feat. Megan Thee Stallion)</a></td><td align="center">Cardi B</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/4Dcm4KMuDz0l01weeSpD4J">Prince Igor (Knyaz Igor): Act II: Polovtsian Dances - Ulyetay na kril’yahk vyetra (Fly away on the wings of the wind) (version for chorus)</a></td><td align="center">Alexander Borodin</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2ctvdKmETyOzPb2GiJJT53">Breathe (In the Air)</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0Qj7PB41b6XgkApKPwDy1r">Ego Death (feat. Steve Vai)</a></td><td align="center">Polyphia</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/5evOCyoVWq2FuQ64t3h8rI">Préludes &#x2F; Book 2, L. 123: 5. Bruyères - Home Session</a></td><td align="center">Claude Debussy</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1mEXZtRMEnjqdPTmZfNzU2">String Quintet No. 60 in C Major, Op. 30 No. 6, G. 324 “La musica notturna delle strade di Madrid”: V. “Los manolos” Modo di suono, e canto</a></td><td align="center">Luigi Boccherini</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2jvuMDqBK04WvCYYz5qjvG">Dogs</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1ccNLIJMQxsTleaULYWwZD">無條件</a></td><td align="center">Eason Chan</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/086sjLPEqdKBgTxbTeCLCv">Rêverie, L. 68</a></td><td align="center">Claude Debussy</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0YPuRrM2NwzdtuShUKkts6">G.O.A.T.</a></td><td align="center">Polyphia</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/6unmtLYQ2LQ1Cg4IdAiU9g">Nobody’s Fault but Mine - Remaster</a></td><td align="center">Led Zeppelin</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/7bu0znpSbTks0O6I98ij0W">Tonight, Tonight - Remastered 2012</a></td><td align="center">The Smashing Pumpkins</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/1GEOSS415bZVHNuXWlCT6b">Mother</a></td><td align="center">Pink Floyd</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/0uzwUl56ZPCJtRlqhG5OFo">Neurotica</a></td><td align="center">Polyphia</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3ntrdR24dLkKrzSGRv1FlH">Stand By Me - Remastered 2010</a></td><td align="center">John Lennon</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/2kyEgPaAW8wdpvevPnkf0Z">Ave Maria</a></td><td align="center">Charles Gounod</td></tr><tr><td align="center"><a href="https://open.spotify.com/track/3CmHvyZQQAGkKkTjTBFWN6">Have a Cigar</a></td><td align="center">Pink Floyd</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Daily</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一些奇奇怪怪的问题杂项集合</title>
    <link href="/2022/11/26/wierd_settings/"/>
    <url>/2022/11/26/wierd_settings/</url>
    
    <content type="html"><![CDATA[<h2 id="外接显示器错误识别成Generic-Billboard-Device"><a href="#外接显示器错误识别成Generic-Billboard-Device" class="headerlink" title="外接显示器错误识别成Generic Billboard Device"></a>外接显示器错误识别成Generic Billboard Device</h2><p>这个问题遇到过两次，每次心情都搞得很糟。第一次是期末前发生，当时没有找到好的解决方法，难受了一个月，感觉也很大程度影响了期末的效率。单单重装驱动和重装系统都没有用，最后是重装系统加联想管家重装驱动以后才好的。</p><p>那天的情况是，联想（非微软官方）通过系统更新的渠道推送了一个firmware更新，然后就出现了外接显示器错误识别的问题。所以把锅甩给了联想推送。</p><p>第二次就有意思了，一开始心情爆炸，然后也是搜显示器识别不出来。但很奇怪的是，看了一下系统更新记录，发现这次不像上次一样有联想的推送。感觉更难解决了。但是这次更仔细观察，得出了更细化的结论，就是小标题说的：“外接显示器错误识别成Generic Billboard Device”。搜了一下，在惠普社区发现了<a href="https://h30471.www3.hp.com/t5/you-xi-ben/bi-ji-ben-tong-guoTYPE-C-jie-kou-lian-jie-xian-shi-qi-deTYPE-C-xian-shi-wu-fa-shi-bie-deUSB-she-bei-yi-zhi-tiao-chu-cuo-wu-er-you-de-shi-hou-you-ke-yi-cheng-gong-xian-shi/m-p/1145153/highlight/false">这个帖子</a>。结合这次无法甩锅联想，冥冥中感觉还真有可能是主板的某些软硬件bug。试了一下还真成功了。。。</p><p>谢谢惠普！（惠普笔记本线有啥产品来着？</p>]]></content>
    
    
    <categories>
      
      <category>Techy Sundry</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于Dataflow Analysis中不同节点遍历顺序的Iterative Solver结果相等的证明</title>
    <link href="/2022/11/15/Iterative-Solver-proof/"/>
    <url>/2022/11/15/Iterative-Solver-proof/</url>
    
    <content type="html"><![CDATA[<p><em>以下以may analysis为例，must analysis基本同理，区别主要在于是$\sqsupseteq$还是$\sqsubseteq$。</em></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>以下谈到的所有$F$，首先要满足是safe的，包括transfer function设计合理并且每一轮中每个node都需要（至少）被visit过一次。注意这一点的意义在于你可以说我有一个$F$，transfer function或者每轮遍历内容为空，那么bottom就是它的最小不动点，但这显然不是我们想要的。</p><h2 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h2><p>代表整个程序状态的完全格$L$，完全格的信息不仅有所有OUT, 还有所有IN；每一轮对$L$的映射记为$F: L \rightarrow L$。分别代表两个不同轮内遍历顺序的$F_1$, $F_2$。</p><p>对于visit到一个node时发生的事情，有以下步骤：merge所有前驱的out到in，然后OUT &#x3D; transfer(IN)。</p><p>由于merge函数具有可交换性，所以visit到一个node时merge的顺序对于遍历完一个node之后的结果无影响。（也可以认为遍历一个node是一个原子操作）</p><p>所以任意取一个每一次merge动作和transfer动作也可以看成是一个原子操作$f: L \rightarrow L$。</p><p>所以一个有k个前驱的node $i$被visit的动作的形式化写法可以写成下面形式（记visit前的程序状态格为$L_o$, visit之后为$L_r$）:</p><p>$L_r &#x3D; f_{transfer_i} \circ f_{merge_{i,k}} \circ … \circ f_{merge_{i,1}} (L_o)$，复合函数记为$L_r &#x3D; f_{node_i} (L_o)$</p><p>其中的$f_{transfer_i}$代表transfer，$f_{merge_{i,j}}$代表前驱j的OUT merge到当前node的IN中。</p><p>记号部分整理完毕，现在开始正式的证明。</p><h2 id="Iterative-Solver最小不动点相等的证明"><a href="#Iterative-Solver最小不动点相等的证明" class="headerlink" title="Iterative Solver最小不动点相等的证明"></a>Iterative Solver最小不动点相等的证明</h2><p>在iterative solver中，一轮迭代分解为对node以某个顺序遍历，所以对于一个有n个node的CFG的第$i$轮遍历，可以写成</p><p>$L_{i} &#x3D; f_{node_n} \circ … \circ f_{node_1} (L_{i-1})$，$F$即为复合函数$f_{node_n} \circ … \circ f_{node_1}$, $L_{i} &#x3D; F(L_{i-1})$</p><p>整理一下，$F &#x3D; f_{node_n} \circ … \circ f_{node_1}$ $&#x3D; (f_{transfer_n} \circ f_{merge_{n,k}} \circ … \circ f_{merge_{n,1}}) \circ … \circ (f_{transfer_1} \circ f_{merge_{1,k}} \circ … \circ f_{merge_{1,1}})$$&#x3D; f_{transfer_n} \circ f_{merge_{n,k}} \circ … \circ f_{merge_{n,1}} \circ … \circ f_{transfer_1} \circ f_{merge_{1,k}} \circ … \circ f_{merge_{1,1}}$</p><p>首先，上面出现的每一个映射，无论是$F$还是某个原子函数$f$，都是在$L$上的单调函数。</p><p>对于$F_1$的任一不动点$p_1$，有$p_1 &#x3D; F_1(p_1) &#x3D; f_{transfer_n} \circ f_{merge_{n,k}} \circ … \circ f_{merge_{n,1}} \circ … \circ f_{transfer_1} \circ f_{merge_{1,k}} \circ … \circ f_{merge_{1,1}}(p_1)$，</p><p>根据原子函数的单调性可得，$p_1$ apply每一个原子函数$f$的结果都是$p_1$。</p><p>对于另一个顺序遍历的函数$F_2$，他也是由$F_1$中的原子函数$f$以不同顺序构成，即</p><p>$F_2 &#x3D; f_s \circ … \circ f_1$，</p><p>原子函数存在一个一一映射:</p><p>${f_1, …, f_s} \rightarrow \cup_{i \in {1, …, n}} ({f_{transfer_i}} \cup {f_{merge_{i, k}}, …, f_{merge_{i, 1}}})$</p><p>下面的记法与上面等价：</p><p>${f_1, …, f_s} \rightarrow \cup_{i \in {1, …, n}} ({f_{transfer_i}} \cup (\cup_{k \in 节点i的前驱节点的标号集合} {f_{merge_{i, k}}}))$</p><p>所以$p_1 &#x3D; F_2(p_1)$，$p_1$是$F_2$的不动点。</p><p>同理，$F_2$的任意一个不动点$p_2$是$F_1$的不动点。</p><p>所以两个$F$的不动点集合相等，二者有同一个最小不动点。</p><p>Q.E.D.</p><h2 id="WorkList-Solver与Iterative-Solver最小不动点相等的证明"><a href="#WorkList-Solver与Iterative-Solver最小不动点相等的证明" class="headerlink" title="WorkList Solver与Iterative Solver最小不动点相等的证明"></a>WorkList Solver与Iterative Solver最小不动点相等的证明</h2><p>TODO.</p><p>暂时还没时间细想，但是可能是可以证明对于一个类似Iterative Solver，但每一轮中遍历顺序不同的Solver，只要是到达不动点，那么这个不动点就是所有Iterative Solver的不动点。然后证明WorkList Solver由于相当于去掉了上述Solver的遍历序列中对$L$没有影响的$f_{node_i}$而得到的遍历序列，从而最后结果也是最小不动点。</p><!--首先明确一点，设计出来的Iterative Solver是基线，也就是说有了设计合理的transfer function，Iterative Solver的结果是safe的。WorkList没有不动点之说，因为WorkList没有轮次的概念。要问的是WorkList是否会停留在Iterative Solver的最小不动点上。1.WorkList停机的地方是Iterative Solver的不动点。停机位置是OUT不变，所以OUT=transfer(IN), 2.workList停机的不动点是最小不动点。--><h2 id="对WorkList算法的可能优化"><a href="#对WorkList算法的可能优化" class="headerlink" title="对WorkList算法的可能优化"></a>对WorkList算法的可能优化</h2><p>TODO.</p>]]></content>
    
    
    <categories>
      
      <category>Programming Language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Static-Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个比较妥当的文本增量更新的按时间组织方式</title>
    <link href="/2022/10/02/Content-timeline/"/>
    <url>/2022/10/02/Content-timeline/</url>
    
    <content type="html"><![CDATA[<p>当一个文本（特别是技术类文本）发布后可能因有了更多的体会而面临增量式更新。传统的更新内容位置设置有两种方式：</p><ol><li>新内容在文本顶部，对已经读过一次的读者友好，优势是最新的内容替代已过时的内容，且更新更容易被已经读过之前版本的老读者注意到；</li><li>新内容在文本底部，对新读者更友好，优势是顺序暗含时间线，读者能跟随作者的思考过程与脉络。</li></ol><p>我网上冲浪时观察到的普遍情况支持我以上对于优势的理解：情感类文章通常把更新内容放在文末，文章向后延伸，不同更新的分隔线可有可无；技术类以及实时性文本通常会把更新放在文章最前，用分隔线加时间分隔不同时间的更新。</p><p>作为一个比较随意的blog，我会更偏向于第二种方式，因为维护的时间成本较低，且我就是喜欢。但也许某一天这个blog也会兼职一些技术总结记录类文章，所以也许也会需要第一种方式。</p><p>最简单的处理方式是根据类型的不同而使用不同的放置方式，但总有一些文本既是技术类，又有一些脉络，这时候我觉得就需要以下的放置方式：</p><p><strong>文本正文以第二种方式组织，但是在不同更新间插入超链接索引目的地址作为分割，并按需要插入分隔线。超链接本身放在文本开头，以第一种方式，即按时间倒序放置。</strong></p><p>这样做就融合了两种方式的长处。</p><p>Bravo! 文章至此，又浪费一个宝贵的晚上务虚。</p><span id="more"></span><p><em>但作者对本blog中所有文章均不提供任何形式任何类型任何内涵的保证，包括也可能直接对文中内容进行修改，喜喜。</em></p>]]></content>
    
    
    <categories>
      
      <category>Murmur</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>接口类型与签名，谁更本质？</title>
    <link href="/2022/10/02/Interface-and-signature/"/>
    <url>/2022/10/02/Interface-and-signature/</url>
    
    <content type="html"><![CDATA[<p><em>此处并没有考虑继承，因为继承还包含属性字段是否兼容的问题，不过如果把属性字段看成一个只有getter和setter的方法似乎也没有什么问题</em></p><p>疑问源于下面两个问题：</p><p><a href="https://stackoverflow.com/questions/2801878/implementing-two-interfaces-in-a-class-with-same-method-which-interface-method">    Implementing two interfaces in a class with same method.     Which interface method is overridden?</a></p><p><a href="https://stackoverflow.com/questions/22685930/implementing-two-interfaces-with-two-default-methods-of-the-same-signature-in-ja">Implementing two interfaces with two default methods of the same signature in Java 8</a></p><p>也就是说，实际上，方法可以被看做是一个个元素，等价判断的依据是方法签名是否相等。方法在实现关系中被传递赐予，同一类型内不能出现两个方法签名等价的方法。</p><p>实现多个接口是否合法看的是方法，这不禁让我觉得貌似方法是一个更加本质的东西。接口不过是一个类具有某个方法的凭证，但是没有接口这个凭证并不代表这个类不具有方法签名等价意义下的该方法。</p><p>首先回到java的多接口实现规则。这种做法可能会导致可拓展性上的阻碍：</p><ol><li>可能一个类实现了一个接口，而想实现另一个接口而拥有多种能力（即方法）时因为另外有某个方法冲突导致无法实现，即使事实上可能这个方法在整个程序中并不会被用到；</li><li>另外，也有可能某个类只想拥有某个接口的部分方法，以在一些也不过是使用了该接口部分方法的程序中被使用。</li></ol><p>当然，理论上接口最小化原则可以有所缓解，但实际设计的时候可能很难在初期就考虑得十分周全（至少对于我这个智力低下的人是这样的）。</p><p>但如果我们定义这样的关系：一个类型是否可以被看作另一个类型，只需要看他的方法的签名是否涵盖了另一个类型的所有方法（方法包含关系可看作格，在类型转换时单调递减，所以可停机。不过为什么要在这里提可停机？(・∀・(・∀・(・∀・*)），貌似这样的问题就得到了解决。（甚至激进点，只要包含了在整个程序中所有被用到的方法就行。不过由于作为参数传递的关系，检查范围太大了，貌似有点不实际，以及会不会出现包含关系出现循环的问题，比如FUNC1 CALL FUNC2, A作为B传参，FUNC2 CALL FUNC1, 但是作为另一个参数传入。。。好复杂想不明白。不过好像理论上可行，因为相当于当前类型需要包含所有这个类型的对象可能出现的所有位置的CALL）</p><p><em>（这不就是规定所有接口只有一个方法吗？？！）</em></p><p>事实上，类的等价性也不止一种。一种是目前流行的语言（java, c …）普遍采用的<strong>名等价</strong>机制，即按照类型继承关系来判断某对象是否属于某个类型；还有另一种机制被称作<strong>结构等价</strong>。传说那九霄云外，有个无形却至能的玄妙精魄名为Haskell，常有九龙伴舞其周。据残籍记载，其使用的就是结构等价。结构等价为<strong>字段类型相等</strong>（当然，判定依据也是结构等价）。</p><p>（后面反思了一下，两种机制的问题不只是灵活与安全的问题，可能还有语义上的区别，但是今天没时间接着想力）显然，结构等价机制更加灵活，给程序员更多自由。但是，古尔丹，代价是什么呢？</p><p>以我有限的编程经验来看，安全与限制往往同时出现。因而，灵活与安全二者难以两全。上面的新关系和结构等价有些相似，貌似会导致这样的问题：可能两个类型的某方法的签名相同，但实际上含义（实现的功能）并不相同，或者一个类型A根本就不能看作另一个类型B，那么这种关系下，A被当作B使用在编译器看来还是合法的。</p><p>不知道有没有一种解决方案，能够结合两个的优点呢？</p><p>啊，还是C with void* 最万能啊，不能快速写出高效安全可维护可拓展可移植的程序是程序员自己的能力问题。</p><h6 id="激情过后"><a href="#激情过后" class="headerlink" title="激情过后"></a>激情过后</h6><p>另外，基于签名等价的方法等价机制是否也存在问题？也许有两个接口分属两个不同的库，如果他们碰巧有一个方法签名相同的方法，而方法的含义是不同的，那么是否在表达能力上收到了限制？</p><p>所以，也许名等价机制也该将基类纳入考量？没学过C++，不知道名空间有没有比较优雅的解决方案。</p><p>更可怕的是如果他们碰巧有一个方法签名相同且<strong>返回类型不同</strong>的方法，这是否意味着不可能有一个类同时实现这两个接口？</p><p><em>（相关话题：接口最小原则）</em></p>]]></content>
    
    
    <categories>
      
      <category>Programming Language</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客设置注意事项</title>
    <link href="/2022/10/02/tips-in-hexo-blog-setup/"/>
    <url>/2022/10/02/tips-in-hexo-blog-setup/</url>
    
    <content type="html"><![CDATA[<p>注意，如果已经本地设置了git config name和email而又不想设置–global的name和email，去blog&#x2F;.deploy_git&#x2F;.git&#x2F;config加上</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[user]</span><br><span class="hljs-attr">name</span> = yourName<br><span class="hljs-attr">email</span> = yourEmail@yourEmail.com<br></code></pre></td></tr></table></figure><h2 id="hexo-latex-support"><a href="#hexo-latex-support" class="headerlink" title="hexo latex support"></a>hexo latex support</h2><p>Please refer to <a href="https://cps.ninja/2019/03/16/hexo-with-latex/">this link</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Techy Sundry</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
